# Generated by Django 5.1.5 on 2025-02-16 08:29

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('faculty', 'Faculty')], default='faculty', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dept_id', models.AutoField(primary_key=True, serialize=False)),
                ('dept_name', models.CharField(max_length=255)),
            ],
            options={
                'indexes': [models.Index(fields=['dept_name'], name='department_name_idx')],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=255)),
                ('department_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('f_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('department_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='faculty_members', to='api.department')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faculty_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Faculty',
            },
        ),
        migrations.CreateModel(
            name='FacultyCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.course')),
                ('faculty_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='PaperMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=50)),
                ('course_title', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('max_marks', models.IntegerField()),
                ('duration', models.CharField(max_length=50)),
                ('semester', models.CharField(max_length=20)),
                ('is_improvement_cie', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.faculty')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('q_id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('co', models.CharField(default='N/A', max_length=50)),
                ('bt', models.CharField(default='N/A', max_length=50)),
                ('marks', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('Quiz', 'Quiz'), ('Test', 'Test'), ('MCQ', 'MCQ')], default='Test', max_length=50)),
                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy', max_length=50)),
                ('tags', models.JSONField(default=dict)),
                ('image', models.ImageField(blank=True, null=True, upload_to='question_images/')),
                ('course_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.course')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionMedia',
            fields=[
                ('qm_id', models.AutoField(primary_key=True, serialize=False)),
                ('image_paths', models.JSONField(blank=True, null=True)),
                ('equations', models.JSONField(blank=True, null=True)),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='api.question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part', models.CharField(choices=[('A', 'Part A'), ('B', 'Part B'), ('none', 'No Part')], max_length=4)),
                ('order', models.IntegerField()),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='api.papermetadata')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question')),
            ],
            options={
                'ordering': ['part', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_id', models.IntegerField()),
                ('unit_name', models.CharField(max_length=255)),
                ('course_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='api.course')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='unit_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.unit'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_name'], name='course_name_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['name'], name='faculty_name_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['email'], name='faculty_email_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='facultycourse',
            unique_together={('faculty_id', 'course_id')},
        ),
        migrations.AddIndex(
            model_name='unit',
            index=models.Index(fields=['unit_name'], name='unit_name_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unit',
            unique_together={('unit_id', 'course_id')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['course_id', 'unit_id'], name='api_questio_course_unit_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['co', 'bt'], name='api_questio_co_bt_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['difficulty_level'], name='question_difficulty_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['tags'], name='tags_idx'),
        ),
    ]
